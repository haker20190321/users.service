openapi: 3.0.0
info:
  title: Users
  description: Сервис пользователей
  version: 1.0.0
servers:
  - url: http://localhost:{port}/
    description: Локальный сервис
    x-env: development
    variables:
      port:
        enum:
          - '8085'
        default: '8085'
tags:
  - name: Users
    description: Пользователи
  - name: Roles
    description: Роли
paths:
  /users:
    post:
      tags:
        - Users
      description: Создание пользователя
      summary: Создание пользователя
      operationId: createUser
      requestBody:
        x-name: userData
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        '200':
          description: Пользователь добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: 'shared/errors.yml#/components/responses/BadRequest'
        5XX:
          $ref: 'shared/errors.yml#/components/responses/GeneralError'
      x-router-controller: usersController
  /users/search:
    post:
      tags:
      - Users
      description: Поиск пользователей
      summary: Поиск пользователей
      operationId: searchUsers
      requestBody:
        x-name: searchParams
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchParams'
      responses:
        '200':
          description: Найденные пользователи
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

        '400':
          $ref: 'shared/errors.yml#/components/responses/BadRequest'
        5XX:
          $ref: 'shared/errors.yml#/components/responses/GeneralError'
      x-router-controller: usersController

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: Id пользователя
        schema:
          type: integer
    get:
      tags:
        - Users
      description: Получение пользователя по идентификатору
      summary: Получение пользователя по идентификатору
      operationId: getUser
      responses:
        200:
          description: Пользователь найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: 'shared/errors.yml#/components/responses/BadRequest'
        5XX:
          $ref: 'shared/errors.yml#/components/responses/GeneralError'
      x-router-controller: usersController
    post:
      tags:
        - Users
      description: Обновление пользователя
      summary: Обновление пользователя
      operationId: updateUser
      requestBody:
        x-name: userData
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserData'
      responses:
        200:
          description: Пользователь обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: 'shared/errors.yml#/components/responses/BadRequest'
        5XX:
          $ref: 'shared/errors.yml#/components/responses/GeneralError'
      x-router-controller: usersController
    delete:
      tags:
        - Users
      description: Удаление пользователя по идентификатору
      summary: Удаление пользователя по идентификатору
      operationId: deleteUser
      responses:
        200:
          description: Пользователь удален
        '400':
          $ref: 'shared/errors.yml#/components/responses/BadRequest'
        5XX:
          $ref: 'shared/errors.yml#/components/responses/GeneralError'
      x-router-controller: usersController
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        accountId:
          type: integer
          format: int32
        lastName:
          type: string
        firstName:
          type: string
        middleName:
          type: string
          nullable: true
        isActive:
          type: boolean
          nullable: true
          default: true
        createdAt:
          type: string
          format: 'date-time'
        updatedAt:
          type: string
          format: 'date-time'
        deletedAt:
          type: string
          format: 'date-time'
          nullable: true
      example:
          id: 1
          accountId: 123
          lastName: Foo
          firstName: Bar
          middleName: Ivanovich
          isActive: true
          createdAt: 1988-12-12T00:00:00Z
          updatedAt: 1988-12-12T00:00:00Z
          deletedAt: null
    UserData:
      type: object
      properties:
        lastName:
          type: string
          description: Фамилия
        firstName:
          type: string
          description: Имя
        middleName:
          type: string
          description: Отчество
        login:
          type: string
          description: Логин
        password:
          type: string
          format: password
          description: Пароль
        email:
          type: string
          format: email
          description: Email
      example:
          lastName: Foo
          firstName: Bar
          middleName: Ivanovich
          login: foo_bar
          email: foo@bar.com
          password: 11112222d
    SearchParams:
      type: object
      properties:
        where:
          type: object
          properties: {}
          description: See http://docs.sequelizejs.com/manual/tutorial/querying.html#where
          example:
            $or:
              - id:
                  $gte: 2
              - login:
                  $ilike:
                    '%bar%'
          default: {}
        limit:
          description: Лимит
          type: integer
          example: 10
          default: 10
          minimum: 1
          maximum: 100
        offset:
          description: Оффсет
          type: integer
          example: 0
          default: 0
        order:
          description: Сортировки
          type: array
          default: []
          items:
            type: array
            maxItems: 2
            items:
              type: string
          example:
            -
              - firstName
              - DESC
            -
              - lastName
              - DESC